{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","URL","TextField","name","value","label","placeholder","required","isValid","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","errorMeassge","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isValidImg","setIsValidImg","isValidImdb","setIsValidImdb","isSomeEmptyField","validUrl","isUrlValid","url","test","handleChangeUrl","newValue","urlType","onSubmit","preventDefault","prevCount","ImgUrl","Imdb","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfb8587c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  isValid?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  isValid = true,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const errorMeassge = !isValid\n    ? `${label} is invalid`\n    : `${label} is required`;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {(hasError || !isValid) && (\n        <p className=\"help is-danger\">{errorMeassge}</p>\n      )}\n    </div>\n  );\n};\n","import { FC, FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nenum URL {\n  ImgUrl = 'img',\n  Imdb = 'imdb',\n}\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [imgUrl, setImgUrl] = useState<string>('');\n  const [imdbUrl, setImdbUrl] = useState<string>('');\n  const [imdbId, setImdbId] = useState<string>('');\n\n  const [isValidImg, setIsValidImg] = useState<boolean>(true);\n  const [isValidImdb, setIsValidImdb] = useState<boolean>(true);\n\n  const isSomeEmptyField = !title || !imgUrl || !imdbUrl || !imdbUrl || !imdbId;\n\n  // eslint-disable-next-line max-len\n  const validUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const isUrlValid = (url: string) => {\n    return validUrl.test(url);\n  };\n\n  const handleChangeUrl = (newValue: string, urlType: URL) => {\n    switch (urlType) {\n      case 'img':\n        setImgUrl(newValue);\n        setIsValidImg(true);\n        break;\n\n      case 'imdb':\n        setImdbUrl(newValue);\n        setIsValidImdb(true);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!isUrlValid(imgUrl) || !isUrlValid(imdbUrl)) {\n      setIsValidImg(isUrlValid(imgUrl));\n      setIsValidImdb(isUrlValid(imdbUrl));\n\n      return;\n    }\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    setCount(prevCount => prevCount + 1);\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newValue) => setTitle(newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue) => setDescription(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        isValid={isValidImg}\n        onChange={(newValue) => handleChangeUrl(newValue, URL.ImgUrl)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        isValid={isValidImdb}\n        onChange={(newValue) => handleChangeUrl(newValue, URL.Imdb)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newValue) => setImdbId(newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSomeEmptyField}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { FC, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\nimport './App.scss';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setMovies(prevMovies => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}